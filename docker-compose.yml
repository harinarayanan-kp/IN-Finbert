services:
  # Model training service (Runs once to generate .pt file)
  model-training:
    build:
      context: ./model_training
      dockerfile: Dockerfile
    container_name: sentiment-model-training
    volumes:
      # Mount shared volume to output trained model
      - model_data:/app/model
      # Mount training data
      - ./model_training/data:/app/data:ro
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    networks:
      - sentiment-network
    # This service runs once and exits
    restart: "no"
    profiles:
      - training

  # Backend service (FastAPI) 
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sentiment-backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      # Mount shared volume to access trained model
      - model_data:/app/model:ro
    networks:
      - sentiment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/docs || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Frontend service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sentiment-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:8000
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - sentiment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

networks:
  sentiment-network:
    driver: bridge
    name: sentiment-analysis-network

# Optional: Add volumes for data persistence
volumes:
  model_data:
    name: sentiment-model-data
  backend_data:
    name: sentiment-backend-data
